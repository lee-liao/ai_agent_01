version: '3.8'

services:
  # Jaeger All-in-One (includes collector, query, and UI)
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector endpoint
      - "14250:14250"  # gRPC collector endpoint
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
      - "6831:6831/udp"  # UDP agent endpoint
      - "6832:6832/udp"  # UDP agent endpoint
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    networks:
      - observability

  # OpenTelemetry Collector (optional, for more advanced setups)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4319:4317"   # OTLP gRPC receiver (different port to avoid conflict)
      - "4320:4318"   # OTLP HTTP receiver (different port to avoid conflict)
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    depends_on:
      - jaeger
    networks:
      - observability

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - observability

  # Grafana (for metrics visualization)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3001:3000"  # Using 3001 to avoid conflict with Next.js
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - observability

  # PostgreSQL Database for Trading Agent
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=trading_db
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=trading123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./apps/trading-agent/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - observability

  # Redis for caching (optional, for stock quotes caching)
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    ports:
      - "6379:6379"
    networks:
      - observability

networks:
  observability:
    driver: bridge

volumes:
  grafana-storage:
  postgres-data: