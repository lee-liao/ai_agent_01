version: '3.8'

services:
  # PostgreSQL with pgvector extension for RAG system
  postgres-rag:
    image: pgvector/pgvector:pg15
    container_name: exercise7-postgres
    ports:
      - "5433:5432"  # Using 5433 to avoid conflict with existing PostgreSQL on 5432
    environment:
      - POSTGRES_DB=rag_chatbot
      - POSTGRES_USER=rag_user
      - POSTGRES_PASSWORD=rag_password_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_rag_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - rag_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d rag_chatbot"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ChromaDB for vector similarity search
  chromadb:
    image: chromadb/chroma:latest
    container_name: exercise7-chromadb
    ports:
      - "8000:8000"  # ChromaDB default port
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/data
      - ANONYMIZED_TELEMETRY=False
    volumes:
      - chromadb_data:/chroma/data
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching (optional but recommended for production)
  redis-rag:
    image: redis:7-alpine
    container_name: exercise7-redis
    ports:
      - "6380:6379"  # Using 6380 to avoid conflict with existing Redis on 6379
    command: redis-server --appendonly yes --requirepass rag_redis_2024
    volumes:
      - redis_rag_data:/data
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: exercise7-backend
    ports:
      - "8002:8000"  # Using 8002 to avoid conflicts
    environment:
      - DATABASE_URL=postgresql+asyncpg://rag_user:rag_password_2024@postgres-rag:5432/rag_chatbot
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - REDIS_URL=redis://rag_redis_2024@redis-rag:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=["*"]
      - TRADING_AGENT_URL=http://host.docker.internal:8001
      - MAX_FILE_SIZE=50MB
      - CHUNK_SIZE=1000
      - CHUNK_OVERLAP=200
    volumes:
      - ./backend:/app
      - uploaded_files:/app/uploads
    networks:
      - rag_network
    depends_on:
      postgres-rag:
        condition: service_healthy
      chromadb:
        condition: service_started
      redis-rag:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
        - action: rebuild
          path: ./backend/requirements.txt

  # Frontend (Unified Next.js App with Admin Console and Chat Interface)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: exercise7-frontend
    ports:
      - "3002:3000"  # Frontend on port 3002
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8002
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - rag_network
    depends_on:
      - backend
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules/
            - .next/
        - action: rebuild
          path: ./frontend/package.json

  # Jaeger All-in-One (includes collector, query, and UI)
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector endpoint
      - "14250:14250"  # gRPC collector endpoint
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
      - "6831:6831/udp"  # UDP agent endpoint
      - "6832:6832/udp"  # UDP agent endpoint
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    networks:
      - rag_network

  # OpenTelemetry Collector (optional, for more advanced setups)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4319:4317"   # OTLP gRPC receiver (different port to avoid conflict)
      - "4320:4318"   # OTLP HTTP receiver (different port to avoid conflict)
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    depends_on:
      - jaeger
    networks:
      - rag_network

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - rag_network

  # Grafana (for metrics visualization)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3001:3000"  # Using 3001 to avoid conflict with Next.js
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - rag_network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: exercise7-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - rag_network
    depends_on:
      - backend
      - admin-frontend
      - chat-frontend
    restart: unless-stopped
    profiles:
      - production

networks:
  rag_network:
    driver: bridge
    name: exercise7_rag_network

volumes:
  postgres_rag_data:
    name: exercise7_postgres_data
  chromadb_data:
    name: exercise7_chromadb_data
  redis_rag_data:
    name: exercise7_redis_data
  uploaded_files:
    name: exercise7_uploaded_files
  grafana-storage: